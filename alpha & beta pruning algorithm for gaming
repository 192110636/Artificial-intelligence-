import math

# Sample game tree structure
# Each node is a list of values (leaf nodes)
game_tree = [
    [3, 5, 6],
    [9, 1, 2],
    [0, -1, 4],
    [8, 7, 3]
]

def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
    # Base case: reached leaf node
    if depth == 2:
        return game_tree[node // 3][node % 3]

    if maximizing_player:
        max_eval = -math.inf
        for i in range(3):  # 3 children per node
            eval = alpha_beta_pruning(3 * node + i, depth + 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break  # Beta cut-off
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            eval = alpha_beta_pruning(3 * node + i, depth + 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break  # Alpha cut-off
        return min_eval

# Example usage
best_value = alpha_beta_pruning(0, 0, -math.inf, math.inf, True)
print("Best value:", best_value)
